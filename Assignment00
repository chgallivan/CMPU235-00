(* Takes two dates and evaluates true if a is older than b *)
fun is_older(a: int*int*int, b: int*int*int) =
  if #3 a = #3 b
  then
    if #2 a = #2 b then #1 a < #1 b
    else #2 a < #2 b
  else
    #3 a < #3 b;

(* Takes a list of dates and a month (i.e., an int) and returns how many dates in the list are in the given month*)
fun number_in_month(dates: (int*int*int) list, month: int) =
  if null dates then 0
  else
    if #2 (hd dates) = month then 1 + number_in_month(tl dates, month)
    else number_in_month(tl dates, month);
    
(* Takes a list of dates and a list of months and returns the number of dates in the
list of dates that are in any of the months in the list of months *)
fun number_in_months(dates: (int*int*int) list, months: int list) =
  if null months then 0
  else number_in_month(dates, hd months) + number_in_months(dates, tl months);

(*  takes a list of dates and a month and returns a
list holding the dates from the argument list of dates that are in the month *)
fun dates_in_month(dates: (int*int*int) list, month: int) =
  if null dates then []
  else
    if #2 (hd dates) = month then hd dates :: dates_in_month(tl dates, month)
    else dates_in_month(tl dates, month);

(* takes a list of dates and a list of monthsand returns a list holding the
dates from the argument list of dates that are in any of the months in
the list of months. *)
fun dates_in_months(dates: (int*int*int) list, months: int list) =
  if null months then []
  else dates_in_month(dates, hd months) @ dates_in_months(dates, tl months);

(* takes a list of strings and an int n and returns the n
th element of thelist where the head of the list is 1st. *) 
fun get_nth(strings: string list, n: int) =
  if n = 1 then hd strings
  else get_nth(tl strings, n-1);

(* takes a date and returns a string *)
fun date_to_string(date: int*int*int) =
  let
    val months = ["January", "February", "March", "April", "May", "June", "July",
    "August", "September", "October", "November", "December"]
  in
    get_nth(months, #2 date)
    ^ "-" ^ Int.toString(#1 date)
    ^ "-" ^ Int.toString(#3 date)
  end;

(*  takes an int called sum and an int list, and returns an int. *)
fun number_before_reaching_sum(sum: int, numbers: int list) =
  let
    fun count(numbers: int list, acc: int, n: int) =
      if hd numbers + acc >= sum then n
      else count(tl numbers, acc + hd numbers, n + 1)
  in
    count(numbers, 0, 0)
  end;

(*that takes a day of year and returns what month that day is in *)
fun what_month(day: int) =
  let
    val days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
  in
    number_before_reaching_sum(day, days_in_month) + 1
  end;

(* takes two days of the year day1 and day2 and returns an int list
[m1,m2,...,mn] where m1 is the month of day1, m2 is the month of day1 + 1, ..., and mn is the month
of day day2 *)
fun month_range(day1: int, day2: int) =
  if day1 > day2 then []
  else what_month(day1) :: month_range(day1 + 1, day2);

(* takes a list of dates and evaluates to an (int*int*int) option. It evaluates to NONE
if the list has no dates else SOME d where the date d is the oldest date in the list *)
fun oldest(dates: (int*int*int) list) =
  if null dates then NONE
  else 
    let
      val tl_ans = oldest(tl dates)
    in
      if isSome tl_ans andalso is_older(valOf tl_ans, hd dates) then tl_ans
      else SOME (hd dates)
    end;

(* takes a list of numbers and returns a list of the partial sums of these numbers *)
fun cumulative_sum (x::y::xs) = x :: cumulative_sum (x+y::xs)
  | cumulative_sum xs = xs;
